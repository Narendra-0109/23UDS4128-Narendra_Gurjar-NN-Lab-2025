Objective :
This project implements the Perceptron Learning Algorithm using NumPy in Python. The goal is to evaluate the performance of a single perceptron on the NAND and XOR truth tables and then extend it to a Multi-Layer Perceptron (MLP) to classify Boolean functions.

Description of the Model :
This implementation follows a multi-layer perceptron (MLP) approach where:

Individual perceptrons are trained to recognize Boolean functions (NAND, Custom functions).
The outputs of these perceptrons are then combined to train a final perceptron for binary classification.
The model is evaluated using accuracy.

# libraries
import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

class MLP:
    def __init__(self, input_size, hidden_size, output_size, learning_rate=0.1, epochs=10000):
        self.lr = learning_rate
        self.epochs = epochs
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        
        self.weights_input_hidden = np.random.uniform(-1, 1, (self.input_size, self.hidden_size))
        self.weights_hidden_output = np.random.uniform(-1, 1, (self.hidden_size, self.output_size))
        self.bias_hidden = np.zeros((1, self.hidden_size))
        self.bias_output = np.zeros((1, self.output_size))
    
    def fit(self, X, y):
        for _ in range(self.epochs):
            # Forward propagation
            hidden_layer_input = np.dot(X, self.weights_input_hidden) + self.bias_hidden
            hidden_layer_output = sigmoid(hidden_layer_input)
            output_layer_input = np.dot(hidden_layer_output, self.weights_hidden_output) + self.bias_output
            output_layer_output = sigmoid(output_layer_input)
            
            # Backpropagation
            output_error = y - output_layer_output
            output_delta = output_error * sigmoid_derivative(output_layer_output)
            
            hidden_error = np.dot(output_delta, self.weights_hidden_output.T)
            hidden_delta = hidden_error * sigmoid_derivative(hidden_layer_output)
            
            # Update weights and biases
            self.weights_hidden_output += np.dot(hidden_layer_output.T, output_delta) * self.lr
            self.bias_output += np.sum(output_delta, axis=0, keepdims=True) * self.lr
            self.weights_input_hidden += np.dot(X.T, hidden_delta) * self.lr
            self.bias_hidden += np.sum(hidden_delta, axis=0, keepdims=True) * self.lr
    
    def predict(self, X):
        hidden_layer_input = np.dot(X, self.weights_input_hidden) + self.bias_hidden
        hidden_layer_output = sigmoid(hidden_layer_input)
        output_layer_input = np.dot(hidden_layer_output, self.weights_hidden_output) + self.bias_output
        output_layer_output = sigmoid(output_layer_input)
        return np.round(output_layer_output)

# XOR dataset
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y = np.array([[0], [1], [1], [0]])

# Train MLP on XOR
mlp = MLP(input_size=2, hidden_size=4, output_size=1, learning_rate=0.1, epochs=10000)
mlp.fit(X, y)

# Predictions
print("Predictions:", mlp.predict(X))

Explanation of the Code :
Libraries Used
NumPy is used for numerical operations and matrix calculations.
Perceptron Class :
The perceptron model initializes random weights and applies a learning rule based on error correction.
Activation Function
Uses a threshold-based step function to classify inputs.
Training Process
Implements the perceptron learning algorithm with weight updates based on errors.

Evaluation :
Accuracy is computed based on correct classifications.

Results and Performance :
Fun1 Accuracy: 100.00% | Predictions: [0 0 0 1]
Fun2 Accuracy: 100.00% | Predictions: [0 0 1 0]
Fun3 Accuracy: 100.00% | Predictions: [0 1 0 0]
Fun4 Accuracy: 100.00% | Predictions: [1 0 0 0]
Final Perceptron Accuracy: 100.00% | Predictions: [0 1 1 0]
