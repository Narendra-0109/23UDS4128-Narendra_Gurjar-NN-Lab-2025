import numpy as np

class Perceptron:
    def __init__(self, learning_rate=0.1, epochs=100):
        self.lr = learning_rate
        self.epochs = epochs
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.weights = np.zeros(n_features)
        self.bias = 0
        
        for _ in range(self.epochs):
            for i in range(n_samples):
                linear_output = np.dot(X[i], self.weights) + self.bias
                y_predicted = self.activation_function(linear_output)
                
                # Perceptron update rule
                update = self.lr * (y[i] - y_predicted)
                self.weights += update * X[i]
                self.bias += update

    def activation_function(self, x):
        return 1 if x >= 0 else 0
    
    def predict(self, X):
        linear_output = np.dot(X, self.weights) + self.bias
        return np.array([self.activation_function(x) for x in linear_output])

# NAND dataset
X_nand = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y_nand = np.array([1, 1, 1, 0])

# XOR dataset
X_xor = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y_xor = np.array([0, 1, 1, 0])

# Train perceptron on NAND
perceptron_nand = Perceptron(learning_rate=0.1, epochs=100)
perceptron_nand.fit(X_nand, y_nand)
nand_predictions = perceptron_nand.predict(X_nand)
print("NAND Predictions:", nand_predictions)

# Train perceptron on XOR
perceptron_xor = Perceptron(learning_rate=0.1, epochs=100)
perceptron_xor.fit(X_xor, y_xor)
xor_predictions = perceptron_xor.predict(X_xor)
print("XOR Predictions:", xor_predictions)

# Evaluate Performance
def evaluate(y_true, y_pred):
    accuracy = np.mean(y_true == y_pred) * 100
    return f"Accuracy: {accuracy:.2f}%"

print("NAND Perceptron Performance:", evaluate(y_nand, nand_predictions))
print("XOR Perceptron Performance:", evaluate(y_xor, xor_predictions))
